This documentation should go elsewhere, but I haven't gotten around to it
yet.

UTF-8
-----

JOE now handles two classes of character sets: UTF-8 and byte coded (like
ISO-8859-1).  It can not yet handle other major classes such as UTF-16 or
GB2312. There are other restrictions: character sets must use LF (0x0A) or
CR-LF (0x0D - 0x0A) as line terminators, space must be 0x20 and tab must be
0x09. Basically, the files must be UNIX or MS-DOS compatible text files.

This means EBCDIC will not work properly (but you would need to handle fixed
record length lines anyway) and character sets which use CR terminated lines
(MACs) will not yet work.

The terminal and the file can have different encodings.  JOE will translate
between the two.  Currently, one of the two must be UTF-8 for translation to
work.

The character set for the terminal and the default character set assumed for
files is determined by the 'LC_ALL' environment variable (and if that's not
set, LC_CTYPE and LANG are also checked).

For example, if LC_ALL is set to:

	de_DE

Then the character set will be ISO-8859-1.

If LC_ALL is set to:

	de_DE.UTF-8

The character set will UTF-8.

Hit ^T E to change the coding for the file.  Hit <tab> <tab> at this prompt
to get a list of available codings.  There are a number of built-in
character sets, plus you can install character sets in the ~/.joe/charmaps
and /usr/local/etc/joe/charmaps directories.

Check: /usr/share/i18n/charmaps for example character set files.  Only
byte oriented character sets will work.  Also, the file should not be
gzipped (all of the charmap file in /usr/share/i18n/charmaps on my computer
were compressed).  The parser is very bad, so basically the file has to look
exactly like the example one in /usr/local/etc/joe/charmaps.

You can hit ^K <space> to see the current character set.

You can hit ` x to enter a Unicode character if the file coding is UTF-8.

Programming
-----------

	Try ^K , and ^K .  These keys select the current block (based on
indentation) and shift it left or right by the -istep and -indentc.

	Hit Ctrl-G to jump between matching delimiters.  This works on
word delimiters for languages like Pascal and Verilog which use begin...end
to delimit blocks.  If a word is not known, Ctrl-G starts a search with the
word moved into the search prompt.

Selecting blocks
----------------

	The "classic" way is to hit ^K B at the beginning and ^K K at the
end.  These set pointers called markb and markk.  Once these are set you
can jump to markb with ^[ b and jump to markk with ^[ k.

	New way: hit Ctrl-rtarw (right arrow) to start selecting rightward. 
Each time you hit Ctrl-rtarw, the block is extended one more to the right. 
This uses a simple macro: "begin_marking,rtarw,toggle_marking".

	Unfortunately, there is no standard way to get the keysequence given
by the terminal emulator when you hit Ctrl-rtarw.  Instead you have to
determine this sequence yourself and enter it directly in the joerc file. 
Some examples are given for xterm and gnome-terminal.  Hit ` rtarw within
JOE to have the sequence shown on your screen.  Note that Putty uses ^[ ^[ [
C which will not appear with ` rtarw (also ^[
^[ is set book mark, so you need to unbind it to do this in Putty).

	Also you can hit Ctrl-delete to cut and Ctrl-insert to paste if the
sequence for these keys are known.

Xterm Mouse support
-------------------

Use the -mouse option to enable xterm mouse support.  When enabled, you can
position the cursor or select text with the mouse.  Unfortunately, text
selected this way is not paste-able to other X windows.  However, when xterm
mouse support is enable you can use Shift-left-click and Shift-middle-click
for normal Xterm select and paste.

Shell Windows
-------------

	If you use Bash, you can hit:
		` UP-ARROW and ` DOWN-ARROW to scroll through Bash's history
		buffer.  Other keys work as well: try ` A to go to beginning
		of line or ` E to go to end of line.  Unfortunately JOE only
		emulates a dumb terminal, so you have to use a lot of
		imagination to do any editing beyond hitting backspace.

	In general, any character quoted with ` is sent to the shell.

	Also sent to the shell: TAB, Backspace, Enter, ^C and ^D.
