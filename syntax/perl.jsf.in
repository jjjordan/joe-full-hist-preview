# JOE syntax highlight file for Perl

# Still need:

# _ in numbers
# 0b for binary
# \cC for Ctrl-C
# \x{hex} unicode
# no escapes in single quotes (except \\ and \')
# \N{NAME} named character

# / .. / regex
# s/ .. / .. /
# $name allowed in regex
# m//  same as //
# s///
# tr/// y///
# qr//

# can also do this: s(egg)<larva>
# s' ' ' - no interpolation

# Define colors

=Idle
=Preproc blue
=Comment green
=Constant cyan
=Escape bold cyan
=Type bold
=Keyword bold
=Bad bold red

:idle Idle
	*		idle
	"#"		line_comment	recolor=-1
	"\n"		idle
	"0"		first_digit	recolor=-1
	"1-9"		decimal	recolor=-1
	"."		maybe_float
	"\""		string		recolor=-1
	"\\"		not_string
	"'"		char		recolor=-1
	"`"		backtick	recolor=-1
#	"/"		regex		recolor=-1
	"<"		maybe_inc
	"a-zA-Z_"	ident		buffer

:maybe_inc Idle
	*		idle		noeat
	"<"		maybe_inc1

:maybe_inc1 Idle
	*		idle		noeat
	" 	"	maybe_inc1
	"'\""		quoted_inc_start	save_c recolor=-1
	"A-Za-z_"	inc		buffer noeat

:quoted_inc_start Var
	*		quoted_inc	buffer

:quoted_inc Var
	*		quoted_inc
	&		skipline	save_s

:inc Var
	*		skipline	save_s noeat
	"A-Za-z0-9_"	inc

# Should be treated as a normal line here...

:skipline Idle
	*		skipline
	"\n"		next_line

:todelim Constant
	*		todelim
	"\n"		next_line	strings
	"&"		founddelim	noeat
done

# eat \n so it's not in string.
:next_line Constant
	*		todelim		buffer

:founddelim Var
	*		idle		noeat

:regex Constant
	*		regex
	"\\"		regex_quote	recolor=-1
	"/"		idle

:regex_quote Escape
	*		regex

:not_string Idle
	*		idle noeat
	"\"'`"		idle

:line_comment Comment
	*		line_comment
	"\n"		idle

:first_digit Constant
	*		idle	noeat
	"x"		hex
	"b"		binary
	"."		float
	"eE"		epart
	"0-7"		octal
	"89"		bad_number	recolor=-1

:bad_number Bad
	*		idle	noeat
	"0-9"		bad_number

:octal Constant
	*		idle	noeat
	"0-7_"		octal
	"89"		bad_number	recolor=-1

:binary Constant
	*		idle	noeat
	"01_"		binary
	"2-9"		bad_number	recolor=-1

:hex Constant
	*		idle	noeat
	"0-9A-Fa-f_"	hex

:decimal Constant
	*		idle	noeat
	"0-9_"		decimal
	"eE"		epart
	"."		float

:maybe_float Constant
	*		idle	recolor=-2	noeat
	"0-9"		float		recolor=-2

:float Constant
	*		idle	noeat
	"eE"		epart
	"0-9_"		float

:epart Constant
	*		idle	noeat
	"0-9+\-"	enum

:enum Constant
	*		idle	noeat
	"0-9_"		enum

:string	Constant
	*		string
	"\""		idle
	"\\"		string_escape	recolor=-1
	"$@"		string_subst	recolor=-1

:string_subst Escape
	*		string	noeat recolor=-1
	"a-zA-Z_0-9"	string_subst

:string_escape Escape
	*		string
	"x"		string_hex1
	"c"		string_ctrl
	"N"		string_named
	"0-7"		string_octal2
	"\n"		string		recolor=-2

:string_named Escape
	*		string
	"{"		string_named_rest

:string_named_rest Escape
	*		string_named_rest
	"}"		string

:string_ctrl Escape
	*		string

:string_hex1 Escape
	*		string		noeat
	"{"		string_unicode
	"0-9a-fA-F"	string_hex2

:string_unicode Escape
	*		string_unicode
	"}"		string

:string_hex2 Escape
	*		string		noeat
	"0-9a-fA-F"	string

:string_octal2 Escape
	*		string		noeat
	"0-7"		string_octal3

:string_octal3 Escape
	*		string		noeat
	"0-7"		string

:char Constant
	*		char
	"\n"		reset
	"'"		idle
	"\\"		char_escape	recolor=-1

:char_escape	Escape
	*		char		recolor=-2
	"\\'"	char

:backtick	Constant
	*		backtick
	"`"		idle
	"\\"		backtick_escape	recolor=-1
	"$@"		backtick_subst recolor=-1

:backtick_subst Escape
	*		backtick	noeat recolor=-1
	"a-zA-Z_0-9"	backtick_subst

:backtick_escape Escape
	*		backtick
	"x"		backtick_hex1
	"c"		backtick_ctrl
	"N"		backtick_named
	"0-7"		backtick_octal2
	"\n"		backtick		recolor=-2

:backtick_named Escape
	*		backtick
	"{"		backtick_named_rest

:backtick_named_rest Escape
	*		backtick_named_rest
	"}"		backtick

:backtick_ctrl Escape
	*		backtick

:backtick_hex1 Escape
	*		backtick		noeat
	"{"		backtick_unicode
	"0-9a-fA-F"	backtick_hex2

:backtick_unicode Escape
	*		backtick_unicode
	"}"		backtick

:backtick_hex2 Escape
	*		backtick		noeat
	"0-9a-fA-F"	backtick

:backtick_octal2 Escape
	*		backtick		noeat
	"0-7"		backtick_octal3

:backtick_octal3 Escape
	*		backtick		noeat
	"0-7"		backtick

:ident	Idle
	*		idle		noeat strings
	"if"		kw
	"unless"	kw
	"while"		kw
	"until"		kw
	"foreach"	kw
	"sub"		kw
	"my"		kw
	"do"		kw
	"if"		kw
	"else"		kw
	"elsif"		kw
	"for"		kw
	"continue"	kw
	"last"		kw
	"print"		kw
	"reset"		kw
	"die"		kw
	"goto"		kw
	"require"	kw
	"use"		kw
	"eval"		kw
	"redo"		kw
	"next"		kw
	"warn"		kw
	"m"		match		noeat
	"s"		subst		noeat
	"tr"		subst		noeat
	"y"		subst		noeat
	"qr"		subst		noeat
done
	"a-zA-Z0-9_"	ident

:type Type
	*	idle	noeat

:kw Keyword
	*	idle	noeat

:match Idle
	*		inmatch		save_c recolor=-1
	" 	"	match

:inmatch Constant
	*		inmatch
	&		idle
	"\\"		inmatch_quote	recolor=-1

:inmatch_quote Escape
	*		inmatch

:subst Idle
	*		insubst		save_c recolor=-1
	"<([{`"		delim_insubst	save_c recolor=-1
	" 	"	subst

:insubst Constant
	*		insubst
	&		inrepl
	"\\"		insubst_quote	recolor=-1

:insubst_quote Escape
	*		insubst

:inrepl Constant
	*		inrepl
	&		idle
	"\\"		inrepl_quote

:inrepl_quote Escape
	*		inrepl

:delim_insubst Constant
	*		delim_insubst
	&		delim_repl
	"\\"		delim_quote

:delim_quote Escape
	*		delim_insubst

:delim_repl Constant
	*		repl		save_c recolor=-1
	" 	"	delim_repl

:repl Constant
	*		repl
	&		idle
	"\\"		repl_quote

:repl_quote Escape
	*		repl
